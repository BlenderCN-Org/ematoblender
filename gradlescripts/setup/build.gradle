buildscript {
  repositories {
    jcenter()
    maven {
      url  "http://dl.bintray.com/m2ci-msp/maven"
    }
  }
  dependencies {
        classpath 'org.ajoberstar:gradle-git:1.4.2'
        classpath 'de.undercouch:gradle-download-task:1.0'
        classpath 'org.m2ci.msp:gradle-findbinary-plugin:0.2'
  }
}

import org.apache.tools.ant.taskdefs.condition.Os
import org.ajoberstar.grgit.*

apply plugin: 'org.m2ci.msp.findbinary'

/*----------------------------------------------------------------------------*/

ext{
  parseVersion = { command ->

      def clOutput = new ByteArrayOutputStream()

      exec{
        commandLine command.tokenize()
        workingDir rootProject.buildDir
        standardOutput = clOutput
      }

      def version = clOutput.toString().tokenize()[1]

      return version
  }

  versionNumbers = (new ConfigSlurper()).parse(
    file("$rootDir/buildconfig/versionNumbers.groovy").text
  )
}

ext.parseCL = {param, wd-> // get the output from the  CL call
  def clOutput = new ByteArrayOutputStream()
  exec{
    workingDir = wd
    commandLine = param.tokenize()
    standardOutput = clOutput
    errorOutput = clOutput
  }
  def outputAsString = clOutput.toString()
  println "Result of call was: ${outputAsString}"
  return outputAsString
}

ext.parseVerString = { verstring, boundstring ->  // return true if verstring > boundstring
  println("Comparing versions $verstring and $boundstring")
  def verlist = verstring.tokenize('.').take(2)
  def boundlist = boundstring.tokenize('.').take(2)
   return verlist[0] > boundlist[0] || (verlist[0] == boundlist[0] & verlist[1] >= boundlist[1])
  }


ext.pythonNumber = null

/*----------------------------------------------------------------------------*/

// define different tasks to make sure that Python tools and packages are working correctly

task makeBuildDir(){
    doFirst{
    rootProject.buildDir.mkdirs()
  }
}

task checkPython() {
  dependsOn makeBuildDir
  doLast{
      println("Checking python installation")
      // try to search for python3
      def pyStr = null
      try{
        pyStr = parseCL("python3 --version", "$rootProject.buildDir")
        pythonNumber = "python3"
      } catch(e){
        println(e)
        println("Command python3 failed")
        pyStr = parseCL("python --version", "$rootProject.buildDir")
        pythonNumber = "python"
      }
      def pyVer = pyStr.tokenize()[1]
      println("Python version is $pyVer")
      println("Python call is $pythonNumber")
      assert parseVerString(pyVer, versionNumbers.python.failBelow)
      if (! parseVerString(pyVer, versionNumbers.python.warnBelow)){
        println("WARNING - OLD PYTHON VERSION")
  }
}
}

task checkPip() {
  dependsOn checkPython
  doLast{
      println("Checking Pip installation")
      def pipStr = parseCL("pip -V", "$rootProject.buildDir")
      def pipVer = pipStr.tokenize()[1]
      println("Pip version is $pipVer")
      assert parseVerString(pipVer, versionNumbers.pip.failBelow)
      if (! parseVerString(pipVer, versionNumbers.pip.warnBelow)){
        println("WARNING - OLD PIP VERSION")
      }
  }
}

task checkNumpy() {
  dependsOn checkPython
  doLast{
      println("Checking Numpy installation with python command $pythonNumber")
      def numpyVer = parseCL( "$pythonNumber $rootProject.projectDir/ematoblender/scripts/numpy_version.py",
      "$rootProject.buildDir")
      //def numpyVer = parseCL("$pythonNumber -c \"import numpy;print(numpy.__version__)\"", "$rootProject.buildDir")
      assert parseVerString(numpyVer, versionNumbers.numpy.failBelow)
      if (! parseVerString(numpyVer, versionNumbers.numpy.warnBelow)){
        println("WARNING - OLD NUMPY VERSION")
      }
  }
}

task checkBlender(){
//    dependsOn findBlender
    doLast{
        println("Checking Blender versioon for compatibility.")
        

    }
}

  /*--------------------------------------------------------------------------*/

// define different tasks for downloading and installing mathutils based on OS
if (Os.isFamily(Os.FAMILY_WINDOWS)){ // OS is windows

  /*--------------------------------------------------------------------------*/

  task findBlender {
    dependsOn makeBuildDir

    def outputFile = file("$rootProject.buildDir/blender.json")
    outputs.file outputFile

    doLast{
      outputFile.parentFile.mkdirs()

      def blenderpath = findbinary{ binary "blender.exe" }.path

      def blenderVersion = (parseVersion("$blenderpath -v")).toDouble()
      def builder = new groovy.json.JsonBuilder()

      def json = builder.blender{
          path "$blenderpath"
          version "$blenderVersion"
      }
      println("Outputting blender path to JSON")
      outputFile.text = builder.toPrettyString()
    }

  }

  /*--------------------------------------------------------------------------*/

  task downloadMathUtils{

    doLast{
      def tree = fileTree(rootProject.file('external')).include("blender_mathutils-*.whl")
      if (tree.isEmpty()){
        println("\n\n----------------NOTICE-----------------------")
        println("Please manually download an appropriate version of mathutils into ./external")
        println("We recommend blender_mathutils-2.74-cp34-none-win32.whl")
        println("From http://www.lfd.uci.edu/~gohlke/pythonlibs/#blender-mathutils")
        throw new GradleException("You must firstly download this file.")
      }
    }
  }

  /*--------------------------------------------------------------------------*/

  task cloneMathUtils(type:Copy){ // copies the mathutils file into the right directory for building

    dependsOn downloadMathUtils
    from(rootProject.file('external/'))
    into( "$rootProject.buildDir/mathutils")
    include( 'blender_mathutils*.whl')

  }

  /*--------------------------------------------------------------------------*/

  task installMathUtils { // use pip to install Blender-mathutils

    dependsOn cloneMathUtils
    dependsOn checkPip

    doLast{

      // get all relevant blender whls
      def tree = fileTree("$rootProject.buildDir/mathutils").include("blender_mathutils-*.whl")
      def fileName = tree.findResult { currentFile ->
        if(currentFile.isFile() ) {
          return currentFile
        }
        else{
          return null
        }
      }
      assert fileName != null
      exec{
        workingDir = "$rootProject.buildDir/mathutils"
        // pip install the first one
        commandLine = "pip install $fileName".tokenize()
      }
    }
  }

  /*--------------------------------------------------------------------------*/

}

else{ //OS is Unix/Mac

  /*--------------------------------------------------------------------------*/

  task findBlender {

    def outputFile = file("$rootProject.buildDir/blender.json")
    outputs.file outputFile

    doLast{
      outputFile.parentFile.mkdirs()

      def blenderpath = findbinary{ binary "blender"
      custom_path "/usr/bin"}.path

      def blenderVersionString = parseCL("$blenderpath -v", "$rootProject.buildDir")
      def blenderVersion =blenderVersionString.tokenize()[1]
      def builder = new groovy.json.JsonBuilder()

      def json = builder.blender{
          path "$blenderpath"
          version "$blenderVersion"
      }

      outputFile.text = builder.toPrettyString()
    }
  }

  /*--------------------------------------------------------------------------*/

  task cloneMathUtils{
    outputs.dir file("$rootProject.buildDir/mathutils")

    doLast{
      Grgit.clone(dir: file("$rootProject.buildDir/mathutils"),
        uri: 'https://gitlab.com/ideasman42/blender-mathutils.git'
      )
    }
  }

  /*--------------------------------------------------------------------------*/

  task installMathUtils(type: Exec){

    dependsOn cloneMathUtils
    outputs.dir file("$rootProject.buildDir/mathutils/build")

    // use "--prefix=" as workaround for bug on os x
    commandLine = "python3 setup.py install --user --prefix=".tokenize()
    workingDir = file("$rootProject.buildDir/mathutils")
  }

  /*--------------------------------------------------------------------------*/

} // end OS check



/*--------------------------------------------------------------------------*/
// define tasks that check whether functionality works within Blender

task checkNumpyInBlender() {
  dependsOn findBlender
  dependsOn checkBlender
  dependsOn checkNumpy
  
  doLast{
    def slurper = new groovy.json.JsonSlurper()
    def blenderInfo = slurper.parseText(
      file("$rootProject.buildDir/blender.json").text
      )
    def bloc = blenderInfo.blender.path
    println "Checking whether numpy works in Blender at $bloc"
    
    def numpyVer = parseCL("${bloc} --factory-startup  --background --python $rootProject.projectDir/ematoblender/scripts/numpy_version.py", "$rootProject.projectDir")
    
    println "Got the output $numpyVer"
    if ("$numpyVer".contains("FAIL")){   // Numpy could not be found; use the local install within Blender by copying the lib
      // find the site-lib for Python
      println("Version number not found, copying numpy lib into Blender")
      def libLocation = parseCL("$pythonNumber $rootProject.projectDir/ematoblender/scripts/numpy_location.py", "$rootProject.projectDir")
      println "Numpy library is located at: $libLocation"
      // copy the numpy lib into the modules/numpy dir (now blender can access it)
      copy{
        from  file("$libLocation")
        into "$rootDir/ematoblender/scripts/modules/numpy"
      }
    }
  }
}

/*--------------------------------------------------------------------------*/
// run a script that backs up the User's User Preferences and sets scripts dir

task setBlenderUserPrefs(){
  dependsOn findBlender
  dependsOn checkPython
  
  doLast{
    // parse the JSON file with the path
    def slurper = new groovy.json.JsonSlurper()
    def blenderInfo = slurper.parseText(
      file("$rootProject.buildDir/blender.json").text
    )    
    def bloc = blenderInfo.blender.path
    println "The blender location is  $bloc"
    exec{   // run the commandline 
      workingDir = file("$rootProject.projectDir")
      commandLine = "${bloc} --factory-startup  --background --python ./ematoblender/configure_blender.py".tokenize()
    }
  }
}

/*--------------------------------------------------------------------------*/

task setup() {
  dependsOn findBlender
  dependsOn installMathUtils
  dependsOn checkNumpyInBlender
  dependsOn setBlenderUserPrefs
}
