buildscript {
  repositories {
    jcenter()
    maven {
      url  "http://dl.bintray.com/m2ci-msp/maven"
    }
  }
  dependencies {
    classpath 'org.m2ci.msp:gradle-findbinary-plugin:0.3'
  }
}

apply plugin: 'org.m2ci.msp.findbinary'

/*----------------------------------------------------------------------------*/

ext{
  commandLine = new CommandLine()
}

/*----------------------------------------------------------------------------*/

task findBlender {

  def outputFile = file("$rootProject.buildDir/blender.json")
  outputs.file outputFile

  doLast{
    outputFile.parentFile.mkdirs()

    def blenderPath = null
    def blenderVersion = null

    try{

      blenderPath = findbinary{ binary "blender" }.path

      blenderVersion = commandLine.parseVersion("$blenderPath -v", "Blender")

      }
    catch(e){
      throw new GradleException("Can not find blender.")
    }

    def builder = new groovy.json.JsonBuilder()

    def json = builder.blender{
      path "$blenderPath"
      version "$blenderVersion"
    }

    outputFile.text = builder.toPrettyString()

  }

}

/*--------------------------------------------------------------------------*/

task findPython {

  def outputFile = file("$rootProject.buildDir/python.json")
  outputs.file outputFile

  doLast{
    outputFile.parentFile.mkdirs()

    def pythonPath = null
    def pythonVersion = null

    try{
      try{
        pythonPath = findbinary{ binary "python3" }.path
      }
      catch(e) {
        pythonPath = findbinary{ binary "python" }.path
      }

      pythonVersion = commandLine.parseVersion("$pythonPath --version", "Python")

    }
    catch(e){
      throw new GradleException("Can not find python.")
    }

    def builder = new groovy.json.JsonBuilder()

    def json = builder.python{
      path "$pythonPath"
      version "$pythonVersion"
    }

    outputFile.text = builder.toPrettyString()

  }

}

/*--------------------------------------------------------------------------*/

task findNumpy {

  def outputFile = file("$rootProject.buildDir/numpy.json")
  def inputFile = file("$rootProject.buildDir/python.json")

  dependsOn findPython

  outputs.file outputFile
  inputs.file inputFile

  doLast{
    outputFile.parentFile.mkdirs()

    def slurper = new groovy.json.JsonSlurper()
    def pythonData = slurper.parseText(
      file(inputFile).text
    )

    def numpyVersion = null
    def numpyLocation = null

    try{

      numpyVersion = commandLine.getOutput("$pythonData.python.path $rootProject.projectDir/ematoblender/scripts/numpy_version.py")

      if( numpyVersion.contains("FAIL") ) {
        throw new GradleException()
      }

      numpyLocation = commandLine.getOutput("$pythonData.python.path $rootProject.projectDir/ematoblender/scripts/numpy_location.py")

    }
    catch(e){
      throw new GradleException("Can not find numpy.\n"+
      "Please ensure that numpy is installed before you continue.\n"+
      "On Linux, use your distribution's package manager to install it, e.g., 'sudo apt-get install python3-numpy' on Ubuntu. \n"+
      "If you are on Windows or OS X, use 'pip install numpy' to install it.\n"+
      "Here, make sure that 'pip' is installing packages for python 3, otherwise try using 'pip3'\n"+
      "For further information, see: http://docs.scipy.org/doc/numpy-1.10.1/user/install.html"
      )
    }

    def builder = new groovy.json.JsonBuilder()

    def json = builder.numpy{
      version "$numpyVersion"
      location "$numpyLocation"
    }

    outputFile.text = builder.toPrettyString()

  }


}

/*--------------------------------------------------------------------------*/

task findTk {

  def outputFile = file("$rootProject.buildDir/tk.json")
  def inputFile = file("$rootProject.buildDir/python.json")

  dependsOn findPython

  outputs.file outputFile
  inputs.file inputFile

  doLast{
    outputFile.parentFile.mkdirs()

    def slurper = new groovy.json.JsonSlurper()
    def pythonData = slurper.parseText(
      file(inputFile).text
    )

    def tkVersion = null


    try{

      tkVersion = commandLine.getOutput("$pythonData.python.path $rootProject.projectDir/ematoblender/scripts/tkinter_version.py")
	  println("$tkVersion")
      if( tkVersion.contains("FAIL") ) {
        throw new GradleException()
      }

    }
    catch(e){
      throw new GradleException("Can not find tkinter.\n"+
      "Please ensure that tk is installed before you continue.\n"+
      "If you are on Linux, look for the python3-tk package\n"
      )
    }

    def builder = new groovy.json.JsonBuilder()

    def json = builder.tk{
      success "$tkVersion"
    }

    outputFile.text = builder.toPrettyString()

  }


}

/*--------------------------------------------------------------------------*/

task findPip {

  def outputFile = file("$rootProject.buildDir/pip.json")
  outputs.file outputFile

  doLast{

    outputFile.parentFile.mkdirs()

    def pipPath = null
    def pipVersion = null

    try{

      try{
        pipPath = findbinary{ binary "pip3" }.path
      }
      catch(e) {
        pipPath = findbinary{ binary "pip" }.path
      }

      pipVersion = commandLine.parseVersion("$pipPath -V", "pip")

    }
    catch(e) {
      throw new GradleException("Cannot find pip.\n" +
      "Please ensure Pip is installed before you continue.\n"+
      "You can find information about installing pip at:\n" +
      "https://pip.pypa.io/en/stable/installing/"
      )
    }

    def builder = new groovy.json.JsonBuilder()

    def json = builder.pip{
      path "$pipPath"
      version "$pipVersion"
    }

    outputFile.text = builder.toPrettyString()

  }

}

/*--------------------------------------------------------------------------*/

task findDependencies() {
  dependsOn findBlender
  dependsOn findPython
  dependsOn findPip
  dependsOn findNumpy
  dependsOn findTk

}

findPython.shouldRunAfter findBlender
findPip.shouldRunAfter findPython
findTk.shouldRunAfter findPip
findNumpy.shouldRunAfter findPip
