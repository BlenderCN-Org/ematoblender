buildscript {
  repositories {
    jcenter()
    maven {
      url  "http://dl.bintray.com/m2ci-msp/maven"
    }
  }
  dependencies {
        classpath 'org.ajoberstar:gradle-git:1.4.2'
        classpath 'de.undercouch:gradle-download-task:1.0'
        classpath 'org.m2ci.msp:gradle-findbinary-plugin:0.2'
  }
}

import org.apache.tools.ant.taskdefs.condition.Os
import org.ajoberstar.grgit.*

apply plugin: 'org.m2ci.msp.findbinary'

ext{
  commandLine = new CommandLine()
}
/*----------------------------------------------------------------------------*/

// define different tasks to make sure that Python tools and packages are working correctly


// define different tasks for downloading and installing mathutils based on OS
if (Os.isFamily(Os.FAMILY_WINDOWS)){ // OS is windows

  /*--------------------------------------------------------------------------*/

  task downloadMathUtils{

    doLast{
      def tree = fileTree(rootProject.file('external')).include("blender_mathutils-*.whl")
      if (tree.isEmpty()){
        println("\n\n----------------NOTICE-----------------------")
        println("Please manually download an appropriate version of mathutils into ./external")
        println("We recommend blender_mathutils-2.74-cp34-none-win32.whl")
        println("From http://www.lfd.uci.edu/~gohlke/pythonlibs/#blender-mathutils")
        throw new GradleException("You must firstly download this file.")
      }
    }
  }

  /*--------------------------------------------------------------------------*/

  task cloneMathUtils(type:Copy){ // copies the mathutils file into the right directory for building

    dependsOn downloadMathUtils
    from(rootProject.file('external/'))
    into( "$rootProject.buildDir/mathutils")
    include( 'blender_mathutils*.whl')

  }

  /*--------------------------------------------------------------------------*/

  task installMathUtils { // use pip to install Blender-mathutils

    dependsOn cloneMathUtils
    dependsOn ":gradlescripts:setup:checkVersions:checkVersions"

    doLast{

      // get all relevant blender whls
      def tree = fileTree("$rootProject.buildDir/mathutils").include("blender_mathutils-*.whl")
      def fileName = tree.findResult { currentFile ->
        if(currentFile.isFile() ) {
          return currentFile
        }
        else{
          return null
        }
      }
      assert fileName != null
      exec{
        workingDir = "$rootProject.buildDir/mathutils"
        // pip install the first one
        commandLine = "pip install $fileName".tokenize()
      }
    }
  }

  /*--------------------------------------------------------------------------*/

}

else{ //OS is Unix/Mac

  /*--------------------------------------------------------------------------*/


  /*--------------------------------------------------------------------------*/

  task cloneMathUtils{
    outputs.dir file("$rootProject.buildDir/mathutils")

    doLast{
      Grgit.clone(dir: file("$rootProject.buildDir/mathutils"),
        uri: 'https://gitlab.com/ideasman42/blender-mathutils.git'
      )
    }
  }

  /*--------------------------------------------------------------------------*/

  task installMathUtils(type: Exec){

    standardOutput = new ByteArrayOutputStream()
    errorOutput = standardOutput

    dependsOn cloneMathUtils
    outputs.dir file("$rootProject.buildDir/mathutils/build")

    // use "--prefix=" as workaround for bug on os x
    commandLine = "python3 setup.py install --user --prefix=".tokenize()
    workingDir = file("$rootProject.buildDir/mathutils")
  }

  /*--------------------------------------------------------------------------*/

} // end OS check



/*--------------------------------------------------------------------------*/
// define tasks that check whether functionality works within Blender

task checkNumpyInBlender() {

  dependsOn ":gradlescripts:setup:checkVersions:checkVersions"

  def outputFile = file("$rootProject.buildDir/checkNumpyInBlender.json")

  outputs.file outputFile

  doLast{

    def slurper = new groovy.json.JsonSlurper()

    def numpyInfo = slurper.parseText(
	  file("$rootProject.buildDir/numpy.json").text
		)
    def blenderInfo = slurper.parseText(
      file("$rootProject.buildDir/blender.json").text
      )
    def bloc = blenderInfo.blender.path

    println "Checking whether numpy works in Blender at $bloc"

    def numpyVer = commandLine.getOutput("${bloc} --factory-startup  --background --python $rootProject.projectDir/ematoblender/scripts/numpy_version.py")

    println "Got the output $numpyVer"

    // if Numpy could not be found; use the local install within Blender by copying the lib
    if ("$numpyVer".contains("FAIL")){

      // find the site-lib for Python
      println("Version number not found, copying numpy lib into Blender")
      def libLocation = numpyInfo.numpy.location

      println "Numpy library is located at: $libLocation"

      // copy the numpy lib into the modules/numpy dir (now blender can access it)
      copy{
        from  file("$libLocation")
        into "$rootProject.projectDir/ematoblender/scripts/modules/numpy"
      }
    }

    def builder = new groovy.json.JsonBuilder()
    def json = builder.checkNumpyInBlender{
      state "DONE"
    }

    outputFile.text = builder.toPrettyString()

  }

}

/*--------------------------------------------------------------------------*/
// run a script that backs up the User's User Preferences and sets scripts dir

task setBlenderUserPrefs(){

  dependsOn ":gradlescripts:setup:checkVersions:checkVersions"

  doLast{
    // parse the JSON file with the path
    def slurper = new groovy.json.JsonSlurper()
    def blenderInfo = slurper.parseText(
      file("$rootProject.buildDir/blender.json").text
    )
    def bloc = blenderInfo.blender.path
    println "The blender location is  $bloc"
    exec{   // run the commandline
      workingDir = file("$rootProject.projectDir")
      commandLine = "${bloc} --factory-startup  --background --python ./ematoblender/configure_blender.py".tokenize()
    }

  }
}

/*--------------------------------------------------------------------------*/

task setup() {
  dependsOn installMathUtils
  dependsOn checkNumpyInBlender
  dependsOn setBlenderUserPrefs
}
